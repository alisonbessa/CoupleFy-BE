generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  costCenterId    String?
  partnerId       String?
  isPrimaryUser   Boolean           @default(false)
  transactions    Transaction[]
  costCenter      CostCenter?       @relation(fields: [costCenterId], references: [id])
  UserTransaction UserTransaction[]
}

model CostCenter {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  hasPrivacy   Boolean       @default(false)
  transactions Transaction[]
  user         User[]
  categories   Category[]
}

model Transaction {
  id              String            @id @default(uuid())
  title           String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  amount          Float
  paymentMethod   String
  authorId        String
  costCenterId    String
  date            String
  author          User              @relation(fields: [authorId], references: [id])
  costCenter      CostCenter        @relation(fields: [costCenterId], references: [id])
  category        Category?         @relation(fields: [categoryId], references: [id])
  categoryId      String?
  subcategory     Subcategory?      @relation(fields: [subcategoryId], references: [id])
  subcategoryId   String?
  UserTransaction UserTransaction[]
}

model UserTransaction {
  userId        String
  transactionId String
  userWeight    Float
  user          User        @relation(fields: [userId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@id([userId, transactionId])
}

model Category {
  id                  String        @id @default(uuid())
  name                String
  isPrivate           Boolean       @default(false)
  costCenterId        String
  primaryUserWeight   Float?        @default(50)
  secondaryUserWeight Float?        @default(50)
  subcategories       Subcategory[]
  transactions        Transaction[]
  costCenter          CostCenter    @relation(fields: [costCenterId], references: [id])
}

model Subcategory {
  id                  String        @id @default(uuid())
  name                String
  categoryId          String
  primaryUserWeight   Float?        @default(50)
  secondaryUserWeight Float?        @default(50)
  transactions        Transaction[]
  category            Category      @relation(fields: [categoryId], references: [id])
}
